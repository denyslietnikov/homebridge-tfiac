name: CI Pipeline

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'bugfix/**'
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: 🔍 Validate
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Get npm cache info
        id: npm-cache-info
        run: |
          echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
          echo "hash=$(sha256sum package-lock.json | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Cache npm packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-info.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ steps.npm-cache-info.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎨 Lint
        run: npm run lint

      - name: 🔒 Security audit
        run: |
          npm audit
          npm install -g license-checker
          license-checker --production --onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause"

      - name: 🧪 Test with coverage
        run: npm test -- --coverage --coverageThreshold='{"global":{"branches":"75","functions":"80","lines":"80","statements":"80"}}'

      - name: 🏗️ Build
        run: npm run build

      - name: 💾 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}-${{ steps.npm-cache-info.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-build-

  analyze:
    name: 🔍 Analyze Dependencies
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Check dependencies
        id: deps-check
        run: |
          echo "::set-output name=has_outdated::$(npm outdated --json | jq 'length > 0')"
          echo "::set-output name=has_vulnerabilities::$(npm audit --json | jq '.metadata.vulnerabilities.total > 0')"

      - name: 📊 Generate dependency report
        run: |
          npm list --json > dependency-report.json
          npm audit --json > audit-report.json

      - name: 📋 Generate outdated report
        run: |
          npm outdated --json > outdated-report.json || true

      - name: 📢 Report issues
        if: steps.deps-check.outputs.has_outdated == 'true' || steps.deps-check.outputs.has_vulnerabilities == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const fs = require('fs');
            const outdatedReport = JSON.parse(fs.readFileSync('outdated-report.json', 'utf8') || '{}');
            const auditReport = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
            // Build Markdown table for outdated deps
            const outdatedEntries = Object.entries(outdatedReport);
            let outdatedTable = '| Package | Current | Wanted | Latest |\n|--|--|--|--|\n';
            if (outdatedEntries.length) {
              outdatedTable += outdatedEntries
                .map(([name, info]) => `| ${name} | ${info.current || '-'} | ${info.wanted || '-'} | ${info.latest || '-'} |`)
                .join('\n');
            } else {
              outdatedTable += '| _All dependencies up-to-date_ |  |  |  |';
            }
            // Build Markdown table for vulnerabilities
            const vuln = auditReport.metadata.vulnerabilities;
            const vulnTable = [
              '| Severity | Count |',
              '|--|--|',
              `| info | ${vuln.info} |`,
              `| low | ${vuln.low} |`,
              `| moderate | ${vuln.moderate} |`,
              `| high | ${vuln.high} |`,
              `| critical | ${vuln.critical} |`,
              `| **total** | **${vuln.total}** |`
            ].join('\n');
            // Create the issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Dependencies need attention',
              body: [
                '## Dependency Analysis Report',
                '',
                '### Outdated Dependencies',
                outdatedTable,
                '',
                '### Security Vulnerabilities',
                vulnTable
              ].join('\n\n'),
              labels: ['dependencies','security']
            });