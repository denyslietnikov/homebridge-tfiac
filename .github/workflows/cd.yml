name: 📦 Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_version_bump:
        description: 'Force version bump regardless of commit types'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: 🚀 Release to npm & GitHub
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: https://registry.npmjs.org
          always-auth: true

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Authenticate npm registry
        run: npm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}

      - name: 🚀 Run semantic-release (forced)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.force_version_bump == 'true'
        run: npx semantic-release --no-ci --force-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🚀 Run semantic-release (normal)
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.force_version_bump != 'true'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}


      - name: 📦 Deprecate old npm versions
        if: success()
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "Fetching published versions for $PACKAGE_NAME..."
          VERSIONS_JSON=$(npm view "$PACKAGE_NAME" versions --json)
          # Find the 10th-from-last version as cutoff
          CUTOFF=$(echo "$VERSIONS_JSON" | jq -r '.[-10]')
          echo "Cutoff version (10th from end): $CUTOFF"
          # Select versions strictly older than the cutoff
          OLD_VERSIONS=$(echo "$VERSIONS_JSON" | jq -r --arg c "$CUTOFF" 'map(select(. < $c))[]')
          for VERSION in $OLD_VERSIONS; do
            echo "Deprecating $PACKAGE_NAME@$VERSION"
            npm deprecate "$PACKAGE_NAME@$VERSION" "Deprecated in favor of newer releases"
          done
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        shell: bash