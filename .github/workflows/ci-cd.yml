name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'bugfix/**'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

jobs:
  validate:
    name: 🔍 Validate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Get npm cache directory path and hash of package-lock.json
      - name: Get npm cache info
        id: npm-cache-info
        run: |
          echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
          echo "hash=$(sha256sum package-lock.json | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      # Cache npm dependencies using package-lock.json hash
      - name: Cache npm packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-info.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ steps.npm-cache-info.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎨 Lint
        run: npm run lint

      - name: 🔒 Security audit
        run: |
          npm audit
          # Install license checker
          npm install -g license-checker
          # Check licenses
          license-checker --production --onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause"

      - name: 🧪 Test with coverage
        run: npm test -- --coverage --coverageThreshold='{"global":{"branches":"80","functions":"80","lines":"80","statements":"80"}}'

      - name: 🏗️ Build
        run: npm run build

      - name: 💾 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}-${{ steps.npm-cache-info.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-build-

  analyze:
    name: 🔍 Analyze Dependencies
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Check dependencies
        id: deps-check
        run: |
          echo "::set-output name=has_outdated::$(npm outdated --json | jq 'length > 0')"
          echo "::set-output name=has_vulnerabilities::$(npm audit --json | jq '.metadata.vulnerabilities.total > 0')"
          
      - name: 📊 Generate dependency report
        run: |
          npm list --json > dependency-report.json
          npm audit --json > audit-report.json
          
      - name: 📢 Report issues
        if: steps.deps-check.outputs.has_outdated == 'true' || steps.deps-check.outputs.has_vulnerabilities == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const depReport = JSON.parse(fs.readFileSync('dependency-report.json', 'utf8'));
            const auditReport = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
            
            const title = 'Dependencies need attention';
            const body = `
            ## Dependency Analysis Report
            
            ### Outdated Dependencies
            ${JSON.stringify(depReport.dependencies, null, 2)}
            
            ### Security Vulnerabilities
            ${JSON.stringify(auditReport.metadata.vulnerabilities, null, 2)}
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['dependencies', 'security']
            });

  prepare-release:
    name: 📋 Prepare Release
    needs: [validate]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Verify version match
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PKG_VERSION=$(node -p "require('./package.json').version")
          if [ "$TAG_VERSION" != "$PKG_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match package.json version ($PKG_VERSION)"
            exit 1
          fi

      - name: 📝 Generate changelog
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const lastTag = execSync('git describe --tags --abbrev=0 HEAD^').toString().trim();
            const changelog = execSync(`git log ${lastTag}..HEAD --pretty=format:"- %s"'`).toString();
            return changelog;

      - name: 📦 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.result }}
          draft: false
          prerelease: false

  publish-staging:
    name: 📦 Publish to Staging
    needs: [prepare-release]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: ♻️ Restore cached build
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: 🏗️ Build if needed
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: npm run build

      - name: 📦 Publish to GitHub Package Registry
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > .npmrc
          npm publish --tag staging
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-production:
    name: 🚀 Publish to Production
    needs: [publish-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://www.npmjs.com/package/homebridge-tfiac
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: ♻️ Restore cached build
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: 🏗️ Build if needed
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: npm run build

      - name: 🚀 Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}